#!/usr/bin/env ruby
require 'pry'

module Point
  # Allows an object to be positioned on a plane.
  module InstanceMethods
    attr_accessor :x, :y

    def to_array
      [x, y]
    end

    alias to_a to_array
  end
end

class Position
  include Point::InstanceMethods
  def initialize(options={x: 0, y: 0})
    @x = options[:x]
    @y = options[:y]
  end

  def change(direction)
    case direction
    when 'N'
      Position.new(x: x, y: y + 1)
    when 'W'
      Position.new(x: x - 1, y: y)
    when 'S'
      Position.new(x: x, y: y - 1)
    when 'E'
      Position.new(x: x + 1, y: y)
    end
  end

  # @return [Hash] Converts options object to an options hash. All keys
  #   will be symbolized.
  def to_hash
    { x: x, y: y }
  end

  alias to_h to_hash

  # Inspects the object
  def inspect
    "<#{self.class} #{{ x: @x, y: @y }}>"
  end
end

def mower(input)
  # valid directions & commmands
  directions = ["N","E","W","S"]
  commands = ["L","R","F"]
  exit if !input.gsub(/\d+/,"").split.join
            .delete("#{(directions + commands).join}").empty? # invalid format
  code = input.strip.lines.map{|line| line.split.join}
  le = code.length # input length
  cp = -1 # code pointer
  lines = ["1 3 N", "5 1 E"] # line results (tmp)
  o = "" # the output
  until (cp+=1) == le
    o += case code[cp]
    when /[1-9]/
      # do some stuff
      next
    else
      lines.shift
    end + "\n"
  end
  return o
end

input = ARGV[0] || """
5 5
1 2 N
LFLFLFLFF
3 3 E
FFRFFRFRRF
"""

puts mower input
