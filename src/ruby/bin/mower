#!/usr/bin/env ruby
require 'pry'

module Point
  # Allows an object to be positioned on a plane.
  module InstanceMethods
    attr_accessor :x, :y

    def to_array
      [x, y]
    end

    alias to_a to_array
  end
end

class Position
  include Point::InstanceMethods
  def initialize(options={x: 0, y: 0})
    @x = Integer(options[:x])
    @y = Integer(options[:y])
  end

  def change(direction)
    case direction
    when 'N'
      self.class.new(x: x, y: y + 1)
    when 'W'
      self.class.new(x: x - 1, y: y)
    when 'S'
      self.class.new(x: x, y: y - 1)
    when 'E'
      self.class.new(x: x + 1, y: y)
    end
  end

  # @return [Hash] Converts options object to an options hash. All keys
  #   will be symbolized.
  def to_hash
    { x: x, y: y }
  end

  alias to_h to_hash

  # Inspects the object
  def inspect
    "<#{self.class} #{{ x: @x, y: @y }}>"
  end
end

class Mower
  def initialize(options={x: 0, y: 0, o: 'N'})
    @position  = Position.new(options)
    @direction = nil
  end
end

class Lawn
  def initialize(x,y)
  end
end

class Parser
  def initialize()
  end

  def validate!
  end
end

def parse(input)
  input = input.strip
  # Valid directions & commmands
  directions = %w{N E W S}
  commands = %w{L R F}
  exit if input.lines.size < 2 # Should contains at least 3 lines of code
  exit if input.lines.size%2==0 # Should contains an odd number of lines
  exit if !input.gsub(/\d+/,"").split.join
            .delete("#{(directions + commands).join}").empty? # Invalid format
  code = input.lines
  x, y = code.shift
  lawn = Lawn.new(x,y)
  le = code.length # Input length
  cp = -1 # Code pointer
  lines = ["1 3 N", "5 1 E"] # Line results (tmp)
  output = "" # The output
  position = Position.new
  keys = [:x,:y,:o]
  until (cp+=1) == le
    output += case code[cp]
    when /[1-9]/
      # Position and direction
      h = keys.zip(code[cp].split(' ')).to_h
      position = Position.new(h).change(h[:o])
      next
    else
      lines.shift
    end + "\n"
  end
  return output
end

input = ARGV[0] || """
5 5
1 2 N
LFLFLFLFF
3 3 E
FFRFFRFRRF
"""

puts parse(input)
